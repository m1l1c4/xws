{"version":3,"sources":["views/Register.jsx"],"names":["Register","props","validateFields","event","state","username","password","name","surname","address","city","email","password1","setState","formValid","formErrorText","validatePassword","upperCheck","lowerCheck","numCheck","passErrorText","length","i","isNaN","charAt","toLowerCase","toUpperCase","usrname","includes","validateUsername","formUsernameText","checkPasswordMatching","target","value","matchErrorText","validateEmail","test","emailErrorText","cleanAll","usernameErrorText","notFilledError","sendRegistration","preventDefault","data","companyName","registryNumber","isCustomer","axios","method","url","ContentType","then","response","status","NotificationManager","success","history","push","error","console","log","handleChange","e","changeForm","bind","className","md","lg","xl","onSubmit","this","onChange","row","control","label","checked","type","placeholder","autoComplete","onBlur","color","hidden","xs","disabled","block","Component"],"mappings":"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","file":"static/js/7.7874463b.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from 'axios';\r\n//import '../../../scss/vendors/custom.css';\r\nimport {NotificationContainer, NotificationManager} from 'react-notifications';\r\nimport \"../../node_modules/react-notifications/lib/notifications.css\"\r\nimport \"../../node_modules/react-notifications/lib/Notifications.js\"\r\nimport { Button, Card, CardBody, CardFooter, Col, Container, Form, Input, InputGroup, FormText,\r\n  InputGroupAddon, InputGroupText, Row, FormGroup, Label } from 'reactstrap';\r\n  import FormControlLabel from '@material-ui/core/FormControlLabel';\r\n import RadioGroup from '@material-ui/core/RadioGroup';  \r\n  import Radio from '@material-ui/core/Radio';\r\n  const url = (process.env.REACT_APP_DOMAIN) + ':' + (process.env.REACT_APP_PORT) + '/';\r\n\r\n\r\nclass Register extends Component {\r\n  constructor(props)\r\n  {\r\n    super(props);\r\n    this.state = {      \r\n      username: \"\" ,      \r\n      password: \"\", \r\n      name: \"\",\r\n      surname: \"\",\r\n      address: \"\",\r\n      city: \"\", \r\n      email: \"\",      \r\n      formValid: true  ,   // enable/disable submit button depending on form validation\r\n      isCustomer: true ,\r\n      formErrorText: \"\" ,\r\n      passErrorText: \"\" ,  \r\n      emailErrorText: \"\" ,      \r\n      matchErrorText: \"\" ,  \r\n      password1: \"\" ,\r\n      changeForm: false ,\r\n      registryNumber : 0 ,\r\n      companyName : \"\",\r\n      formUsernameText: \"\"\r\n      \r\n    };\r\n\r\n    this.validatePassword = this.validatePassword.bind(this) ;\r\n    this.validateFields = this.validateFields.bind(this);\r\n    this.validateUsername = this.validateUsername.bind(this);\r\n  }\r\n\r\n  validateFields = (event) => {\r\n    if (this.state.username === \"\" || this.state.password === \"\" || this.state.name === \"\"\r\n        || this.state.surname === \"\" || this.state.address === \"\" || this.state.city === \"\"\r\n        || this.state.email === \"\" || this.state.password1 === \"\"  )\r\n    {\r\n      this.setState({formValid:true, formErrorText: \"All fields are required.\"});\r\n      return true;\r\n    }else {\r\n      this.setState({formValid:false, formErrorText: \"\"});\r\n      return false;\r\n    }\r\n  }\r\n  \r\n  validatePassword = () => {\r\n    let upperCheck = false;\r\n    let lowerCheck = false;\r\n    let numCheck = false;\r\n    if (this.state.password === \"\") {\r\n      this.setState({passErrorText: \"This field is required.\", formErrorText: \"\"})\r\n    }else if (this.state.password.length < 10 ) {\r\n      this.setState({passErrorText: \"Minimum length of password is 10 characters.\", formErrorText: \"\"})\r\n    }else {\r\n      let i;\r\n      for (i = 0 ; i <  this.state.password.length; i++) {\r\n          if (!isNaN(this.state.password.charAt(i) * 1)) { // if it's number\r\n          numCheck = true;\r\n          continue;\r\n        } else if (this.state.password.charAt(i) === this.state.password.charAt(i).toLowerCase()) {\r\n          lowerCheck = true;\r\n          continue;\r\n        } else if (this.state.password.charAt(i) === this.state.password.charAt(i).toUpperCase()) {\r\n          upperCheck = true;\r\n          continue;\r\n        }\r\n      }\r\n      \r\n      if (!numCheck) {\r\n        this.setState({passErrorText: \"Password must contain at least one digit.\", formErrorText: \"\"})\r\n      } else if (!lowerCheck) {\r\n        this.setState({passErrorText: \"Password must contain at least one lowercase letter.\", formErrorText: \"\"})\r\n      } else if (!upperCheck) {\r\n        this.setState({passErrorText: \"Password must contain at least one capital letter.\", formErrorText: \"\"})\r\n      } else {\r\n        this.setState({passErrorText: \"\", formValid: false, formErrorText: \"\"})\r\n      }\r\n\r\n      if (this.state.username !== \"\") {   \r\n          let usrname = this.state.username.toLowerCase();\r\n          let passchk = this.state.password.toLowerCase();\r\n          if (passchk.includes(usrname)) {\r\n            this.setState({passErrorText: \"Password can not contain username.\", formErrorText: \"\"})\r\n          }\r\n      }\r\n              \r\n    }\r\n  }\r\n\r\n  validateUsername = () => {\r\n    if (this.state.username.length < 6) {\r\n      this.setState({formValid:true, formUsernameText: \"Minimum length of username is 6.\"});\r\n    } else {\r\n      this.setState({formValid:false, formUsernameText: \"\"});\r\n    }\r\n  }\r\n\r\n  checkPasswordMatching = (event) => {\r\n    if (this.state.password !== event.target.value)\r\n      {\r\n        this.setState({formValid: true, matchErrorText: \"Password doesn't match.\"});    // disabling submit button\r\n      } else {\r\n        this.setState({formValid: false, matchErrorText: \"\", password1: event.target.value});\r\n      }\r\n  }\r\n\r\n  validateEmail = (event) => {\r\n    const regex = /\\S+@\\S+\\.\\S+/;\r\n     if ( !regex.test(event.target.value) )   //email not appropriate\r\n     {\r\n        this.setState({formValid: true, emailErrorText: \"Expected input: local@domain.\"})\r\n     } else {\r\n      this.setState({formValid: false, emailErrorText: \"\"})\r\n     }\r\n  }\r\n\r\ncleanAll = () => this.setState({password: \"\", formValid: true  , name: \"\", surname: \"\", address: \"\" ,\r\n                                usernameErrorText: \"\", city: \"\", password1: \"\" , emailErrorText: \"\",\r\n                                notFilledError: false , formErrorText: \"\" , passErrorText: \"\", username: \"\"})\r\n\r\nsendRegistration = event => {\r\n        event.preventDefault();\r\n        this.validateFields();\r\n        \r\n        if (!this.state.formValid)\r\n        {     \r\n\r\n          let data = {\r\n            \"username\": this.state.username ,            \r\n            \"email\": this.state.email ,\r\n            \"password\":this.state.password,\r\n            \"name\": this.state.name ,\r\n            \"surname\": this.state.surname ,            \r\n            \"address\": this.state.address ,\r\n            \"city\": this.state.city  ,\r\n            \"companyName\": this.state.companyName ,\r\n            \"registryNumber\": this.state.registryNumber,\r\n            \"isCustomer\": this.state.isCustomer  \r\n          };\r\n\r\n          axios({\r\n            method: 'post',\r\n            url: url + 'authpoint/auth/register',\r\n            data: data ,\r\n            ContentType: 'application/json'            \r\n          }).then((response) => {\r\n            if (response.status === 200){\r\n              NotificationManager.success('Vas zahtev za registraciju je uspesno poslat!', 'Uspjesno!', 3000);\r\n\r\n                this.props.history.push('/ads');\r\n            }\r\n              \r\n          }, (error) => {\r\n            console.log(error);\r\n          });\r\n\r\n          this.cleanAll();\r\n          \r\n      }\r\n  };\r\n\r\nhandleChange = e => {\r\n  let type = e.target.value;\r\n  type === \"agent\" ? this.setState({changeForm: true, isCustomer: false}) : this.setState({changeForm: false, isCustomer: true})\r\n}\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"app flex-row align-items-center bgimg\">\r\n        <Container>\r\n          <Row className=\"justify-content-center\">\r\n            <Col md=\"16\" lg=\"16\" xl=\"16\">\r\n              <Card className=\"mx-16\">\r\n                <CardBody className=\"p-4\">\r\n                  <Form onSubmit={this.sendRegistration}>\r\n                    <h1>Welcome to our rent-a-car service!</h1>\r\n                    <p className=\"text-muted\">Create your account - it's free</p>\r\n                    <RadioGroup name=\"gender1\" onChange={ e => this.handleChange(e)} row>\r\n                      <FormControlLabel value=\"agent\" control={<Radio row />} label=\"agent\" />\r\n                      <FormControlLabel value=\"regular customer\" control={<Radio checked={!this.state.changeForm}/>} label=\"regular customer\" />                      \r\n                    </RadioGroup>\r\n                    <InputGroup className=\"mb-3\">                      \r\n                      <Input type=\"text\" placeholder=\"Username\" autoComplete=\"username\" onBlur={this.validateUsername}\r\n                            value={this.state.username} onChange={event => this.setState({username: event.target.value})} \r\n                            />\r\n                      <FormText color=\"danger\">{this.state.formUsernameText}</FormText>\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">                      \r\n                      <Input type=\"text\" placeholder=\"Email\" autoComplete=\"email\" \r\n                      value={this.state.email} onChange={event => this.setState({email: event.target.value})} \r\n                      onBlur={this.validateEmail} />\r\n                      <FormText color=\"danger\">{this.state.emailErrorText}</FormText>\r\n                    </InputGroup>\r\n                    <FormGroup row className=\"my-0\" hidden={this.state.changeForm}>\r\n                      <Col xs=\"6\">\r\n                      <InputGroup className=\"mb-3\">\r\n                      \r\n                      <Input type=\"text\" placeholder=\"Name\" autoComplete=\"name\" \r\n                      value={this.state.name} onChange={event => this.setState({name: event.target.value})} />\r\n                    </InputGroup>\r\n                      </Col>\r\n                      <Col xs=\"6\">\r\n                      <InputGroup className=\"mb-3\">\r\n                      \r\n                      <Input type=\"text\" placeholder=\"Surname\" autoComplete=\"surname\" \r\n                      value={this.state.surname} onChange={event => this.setState({surname: event.target.value})}  />\r\n                    </InputGroup>\r\n                      </Col>\r\n                    </FormGroup>\r\n                    <FormGroup row className=\"my-0\" hidden={!this.state.changeForm}>\r\n                      <Col xs=\"6\">\r\n                      <InputGroup className=\"mb-3\">                      \r\n                      <Input type=\"text\" placeholder=\"Company name\" \r\n                      value={this.state.companyName} onChange={event => this.setState({companyName: event.target.value})} />\r\n                    </InputGroup>\r\n                      </Col>\r\n                      <Col xs=\"6\">\r\n                      <InputGroup className=\"mb-3\">                      \r\n                      <Input type=\"text\" placeholder=\"Registry number\" \r\n                      value={this.state.registryNumber} onChange={event => this.setState({registryNumber: event.target.value})}  />\r\n                    </InputGroup>\r\n                      </Col>\r\n                    </FormGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      \r\n                      <Input type=\"text\" placeholder=\"Address\" autoComplete=\"address\" \r\n                      value={this.state.address} onChange={event => this.setState({address: event.target.value})} />\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      \r\n                      <Input type=\"text\" placeholder=\"City\" autoComplete=\"city\"\r\n                       value={this.state.city} onChange={event => this.setState({city: event.target.value})}/>\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-3\">\r\n                      \r\n                      <Input type=\"password\" placeholder=\"Password\" autoComplete=\"new-password\"\r\n                      value={this.state.password} onChange={event => this.setState({password: event.target.value})} \r\n                      onBlur={this.validatePassword} />\r\n                      <FormText color=\"danger\">{this.state.passErrorText}</FormText>\r\n                    </InputGroup>\r\n                    <InputGroup className=\"mb-4\">\r\n                      \r\n                      <Input type=\"password\" placeholder=\"Repeat password\" autoComplete=\"new-password\"\r\n                       onChange={this.checkPasswordMatching} \r\n                       />\r\n                       <FormText color=\"danger\">{this.state.matchErrorText}</FormText>\r\n                    </InputGroup>\r\n                    <Button disabled={this.state.formValid} color=\"success\" block\r\n                    \r\n                    >Create Account</Button>\r\n                    <FormText color=\"danger\">{this.state.formErrorText}</FormText>\r\n                  </Form>\r\n                </CardBody>\r\n                \r\n              </Card>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n        <NotificationContainer/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Register;"],"sourceRoot":""}